{"version":3,"file":"static/js/318.f379c999.chunk.js","mappings":"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","sources":["components/API/fetches.js","components/API/getMovieInfo.js","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\nconst KEY = '7fbdf6cf40f68e209048a77188ae45b3';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchGetMovieDetails = async (\n  movieId,\n  setMovieDetails,\n  setLoader\n) => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  const {\n    id,\n    title,\n    release_date,\n    overview,\n    vote_average,\n    poster_path,\n    backdrop_path,\n    genres,\n  } = response.data;\n  setMovieDetails({\n    id,\n    title,\n    release_date,\n    overview,\n    vote_average,\n    poster_path,\n    backdrop_path,\n    genres,\n  });\n  setLoader(false);\n};\n\nexport const fetchGetMoviesListTrend = async (setListFilms, setLoader) => {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  const result = response.data.results;\n\n  const workWithQuery = array => {\n    return array.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n  };\n  setListFilms(workWithQuery(result));\n  setLoader(false);\n};\n\nexport const fetchGetMoviesListQuery = async (\n  setMovieList,\n  query,\n  setLoader\n) => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  const workWithQuery = array => {\n    return array.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n  };\n  setMovieList(workWithQuery(response.data.results));\n  setLoader(false);\n};\n\nexport const fetchGetMovieReviews = async (\n  setMoviesReviews,\n  movieId,\n  setLoader\n) => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  const workWithQuery = response =>\n    response.map(({ author, content, id }) => ({ author, content, id }));\n  setMoviesReviews(workWithQuery(response.data.results));\n  setLoader(false);\n};\n\nexport const fetchGetMovieCastList = async (\n  setCastList,\n  movieId,\n  setLoader\n) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n\n  const workWithQuery = data => {\n    return data.map(({ id, name, profile_path }) => ({\n      id,\n      name,\n      profile_path,\n    }));\n  };\n  setCastList(workWithQuery(response.data.cast));\n  setLoader(false);\n};\n","export function getGenres({ genres }) {\n  if (!genres) return;\n  return genres.map(genre => genre.name).join(', ');\n}\nexport function getMovieYearInfo({ release_date }) {\n  return new Date(release_date).getFullYear();\n}\nexport function getUserScore({ vote_average }) {\n  return (Number(vote_average) * 10).toFixed(0) + '%';\n}\n","import styled from 'styled-components';\nimport { Link, NavLink } from 'react-router-dom';\nimport { BsArrowLeft } from 'react-icons/bs';\n\nexport const ContainerInfo = styled.div`\n  display: flex;\n  gap: 20px;\n  padding: 10px 0;\n  border-bottom: 2px solid grey;\n`;\nexport const Image = styled.img`\n  width: 300px;\n  height: 100%;\n`;\nexport const InfoWrapper = styled.div`\n  padding: 30px 0px;\n`;\n\nexport const NameMovie = styled.p`\n  font-size: 26px;\n  font-weight: 500;\n  margin-bottom: 20px;\n`;\n\nexport const UserScoreMovie = styled.p`\n  margin-bottom: 20px;\n`;\nexport const InfoTypeOverviewMovie = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n`;\nexport const InfoTypeGenresMovie = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\nexport const ButtonWrapper = styled.span`\n  position: relative;\n`;\nexport const Button = styled(Link)`\n  font-size: 14px;\n  padding: 3px 5px 3px 40px;\n  text-decoration: none;\n  font-weight: 500;\n  background-color: rgb(192, 182, 182);\n  border-radius: 4px;\n`;\nexport const ButtonArrowLeft = styled(BsArrowLeft)`\n  position: absolute;\n  left: 7px;\n`;\nexport const ButtonLink = styled(NavLink)`\n  color: black;\n  padding: 5px 10px;\n  text-decoration: none;\n  font-weight: 500;\n  background-color: rgb(192, 182, 182);\n  border-radius: 4px;\n  &.active {\n    background-color: orange;\n    color: white;\n  }\n`;\nexport const ButtonLinkWrapper = styled.span`\n  display: flex;\n  gap: 20px;\n  padding-bottom: 20px;\n  border-bottom: 2px solid grey;\n`;\n","import { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useRef, Suspense } from 'react';\n// import { fetchGetMovieDetails } from 'components/API/fetches';\nimport { fetchGetMovieDetails } from '../API/fetches';\nimport { getGenres } from '../API/getMovieInfo';\nimport { getMovieYearInfo } from '../API/getMovieInfo';\nimport { getUserScore } from '../API/getMovieInfo';\nimport { RotatingLines } from 'react-loader-spinner';\nimport {\n  ContainerInfo,\n  Image,\n  InfoWrapper,\n  NameMovie,\n  UserScoreMovie,\n  InfoTypeOverviewMovie,\n  InfoTypeGenresMovie,\n  Button,\n  ButtonWrapper,\n  ButtonArrowLeft,\n  ButtonLinkWrapper,\n  ButtonLink,\n} from './MovieDetails.styled';\n\nexport default function MovieDetails() {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [movieDetails, setMovieDetails] = useState({});\n  const [loader, setLoader] = useState(false);\n  const linkToStart = useRef(null);\n  if (location?.state?.from) {\n    linkToStart.current = location.state.from;\n  }\n  useEffect(() => {\n    const getQuery = async function () {\n      try {\n        setLoader(true);\n        fetchGetMovieDetails(movieId, setMovieDetails, setLoader);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getQuery();\n  }, [movieId]);\n\n  return (\n    <>\n      <ButtonWrapper>\n        <ButtonArrowLeft size={22} />\n        <Button to={linkToStart.current || '/'}>Go Back</Button>\n      </ButtonWrapper>\n\n      <ContainerInfo>\n        {loader && (\n          <>\n            <RotatingLines\n              strokeColor=\"orange\"\n              strokeWidth=\"5\"\n              animationDuration=\"0.75\"\n              width=\"96\"\n              visible={true}\n            />\n            <span> is loading...</span>\n          </>\n        )}\n        {movieDetails.poster_path && (\n          <Image\n            src={`https://image.tmdb.org/t/p/w400${movieDetails.poster_path}`}\n            alt=\"\"\n          />\n        )}\n        <InfoWrapper>\n          <NameMovie>\n            {movieDetails.title} ({getMovieYearInfo(movieDetails)})\n          </NameMovie>\n          <UserScoreMovie>\n            User Score: {getUserScore(movieDetails)}\n          </UserScoreMovie>\n          <InfoTypeOverviewMovie>Overview:</InfoTypeOverviewMovie>\n          <div>{movieDetails.overview}</div>\n          <InfoTypeGenresMovie>Genres</InfoTypeGenresMovie>\n          <div>{getGenres(movieDetails)}</div>\n        </InfoWrapper>\n      </ContainerInfo>\n\n      <p>Additional information</p>\n      <ButtonLinkWrapper>\n        <ButtonLink to=\"cast\">Cast</ButtonLink>\n        <ButtonLink to=\"reviews\">Reviews</ButtonLink>\n      </ButtonLinkWrapper>\n      <Suspense\n        fallback={\n          <>\n            <RotatingLines\n              strokeColor=\"orange\"\n              strokeWidth=\"5\"\n              animationDuration=\"0.75\"\n              width=\"96\"\n              visible={true}\n            />\n            <span> is loading...</span>\n          </>\n        }\n      >\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n"],"names":["KEY","axios","fetchGetMovieDetails","movieId","setMovieDetails","setLoader","response","data","id","title","release_date","overview","vote_average","poster_path","backdrop_path","genres","fetchGetMoviesListTrend","setListFilms","result","results","array","map","workWithQuery","fetchGetMoviesListQuery","setMovieList","query","fetchGetMovieReviews","setMoviesReviews","author","content","fetchGetMovieCastList","setCastList","name","profile_path","cast","getGenres","genre","join","getMovieYearInfo","Date","getFullYear","getUserScore","Number","toFixed","ContainerInfo","styled","Image","InfoWrapper","NameMovie","UserScoreMovie","InfoTypeOverviewMovie","InfoTypeGenresMovie","ButtonWrapper","Button","Link","ButtonArrowLeft","BsArrowLeft","ButtonLink","NavLink","ButtonLinkWrapper","MovieDetails","useParams","location","useLocation","useState","movieDetails","loader","linkToStart","useRef","state","from","current","useEffect","getQuery","error","console","log","size","to","strokeColor","strokeWidth","animationDuration","width","visible","src","alt","Suspense","fallback"],"sourceRoot":""}