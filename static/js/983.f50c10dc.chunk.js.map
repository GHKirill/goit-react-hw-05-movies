{"version":3,"file":"static/js/983.f50c10dc.chunk.js","mappings":"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","sources":["components/API/fetches.js","components/MovieSearchList/MovieSearchList.styled.js","components/MovieSearchList/MovieSearchList.js","components/MovieSearch/MovieSearch.styled.js","components/MovieSearch/MovieSearch.js","components/Pages/MoviesSearchPage.js"],"sourcesContent":["import axios from 'axios';\nconst KEY = '7fbdf6cf40f68e209048a77188ae45b3';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchGetMovieDetails = async (\n  movieId,\n  setMovieDetails,\n  setLoader\n) => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  const {\n    id,\n    title,\n    release_date,\n    overview,\n    vote_average,\n    poster_path,\n    backdrop_path,\n    genres,\n  } = response.data;\n  setMovieDetails({\n    id,\n    title,\n    release_date,\n    overview,\n    vote_average,\n    poster_path,\n    backdrop_path,\n    genres,\n  });\n  setLoader(false);\n};\n\nexport const fetchGetMoviesListTrend = async (setListFilms, setLoader) => {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  const result = response.data.results;\n\n  const workWithQuery = array => {\n    return array.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n  };\n  setListFilms(workWithQuery(result));\n  setLoader(false);\n};\n\nexport const fetchGetMoviesListQuery = async (\n  setMovieList,\n  query,\n  setLoader\n) => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  const workWithQuery = array => {\n    return array.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n  };\n  setMovieList(workWithQuery(response.data.results));\n  setLoader(false);\n};\n\nexport const fetchGetMovieReviews = async (\n  setMoviesReviews,\n  movieId,\n  setLoader\n) => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  const workWithQuery = response =>\n    response.map(({ author, content, id }) => ({ author, content, id }));\n  setMoviesReviews(workWithQuery(response.data.results));\n  setLoader(false);\n};\n\nexport const fetchGetMovieCastList = async (\n  setCastList,\n  movieId,\n  setLoader\n) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n\n  const workWithQuery = data => {\n    return data.map(({ id, name, profile_path }) => ({\n      id,\n      name,\n      profile_path,\n    }));\n  };\n  setCastList(workWithQuery(response.data.cast));\n  setLoader(false);\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesList = styled.ul`\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const MovieItem = styled.li`\n  padding: 7px 20px;\n  max-width: 700px;\n  border-radius: 3px;\n  box-shadow: 2px 1px 9px 0px #000000;\n  transition: all 250ms linear;\n  &:hover,\n  &:focus {\n    background-color: orange;\n    transform: scale(1.01);\n    font-size: 16px;\n    font-weight: 500;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  display: block;\n  width: 100%;\n  text-decoration: none;\n  color: black;\n`;\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { RotatingLines } from 'react-loader-spinner';\n//import { fetchGetMoviesListQuery } from 'components/API/fetches';\nimport { fetchGetMoviesListQuery } from '../API/fetches';\nimport { MoviesList, MovieLink, MovieItem } from './MovieSearchList.styled';\n\nexport default function MovieSearchList({ query }) {\n  const [movieList, setMovieList] = useState([]);\n  const [loader, setLoader] = useState(false);\n  //const firstRender = useRef(true);\n  const location = useLocation();\n\n  useEffect(() => {\n    // if (firstRender.current) {\n    //   firstRender.current = false;\n    //   return;\n    // }\n    const getQuery = async () => {\n      setLoader(true);\n      fetchGetMoviesListQuery(setMovieList, query, setLoader);\n    };\n    getQuery();\n  }, [query]);\n\n  return (\n    <>\n      <MoviesList>\n        {loader && (\n          <>\n            <RotatingLines\n              strokeColor=\"orange\"\n              strokeWidth=\"5\"\n              animationDuration=\"0.75\"\n              width=\"96\"\n              visible={true}\n            />\n            <span> is loading...</span>\n          </>\n        )}\n        {!movieList.length ? (\n          <div>\n            There are not movies in the database according to your query\n          </div>\n        ) : (\n          movieList.map(({ title, id }) => (\n            <MovieItem key={id}>\n              <MovieLink to={`${id}`} state={{ from: location }}>\n                {title}\n              </MovieLink>\n            </MovieItem>\n          ))\n        )}\n      </MoviesList>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 30px;\n`;\nexport const Button = styled.button`\n  padding: 5px 10px;\n  font-size: 16px;\n  font-weight: 700;\n  background-color: rgb(192, 182, 182);\n  border-radius: 4px;\n  border: none;\n  padding: 4px 20px;\n  transition: all 250ms linear;\n  &:hover,\n  &:focus {\n    background-color: orange;\n    transform: scale(1.01);\n    color: white;\n    box-shadow: 2px 1px 9px 0px #000000;\n  }\n`;\nexport const Input = styled.input`\n  font-size: 18px;\n  padding-left: 10px;\n  &:focus {\n    outline: 2px solid orange;\n    border: 1px solid transparent;\n  }\n`;\n","import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport MovieSearchList from 'components/MovieSearchList/MovieSearchList';\nimport { Form, Button, Input } from './MovieSearch.styled';\n\nexport default function MovieSearch() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieQuery = searchParams.get('query') ?? '';\n  const [input, setInput] = useState(() => movieQuery);\n  const [inputForFetch, setInputForFetch] = useState(() => movieQuery);\n\n  const handleInputClick = () => {\n    setInput('');\n    setInputForFetch('');\n    setSearchParams({});\n  };\n  const handleSubmitForm = event => {\n    event.preventDefault();\n    const normalizedInput = input.trim().toLowerCase();\n    if (!normalizedInput.length) {\n      console.log('Your query is incorrect');\n      setInput('');\n      return;\n    }\n    setInputForFetch(normalizedInput);\n    setSearchParams(`query=${normalizedInput}`);\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmitForm}>\n        <Input\n          type=\"text\"\n          value={input}\n          onChange={e => setInput(e.target.value)}\n          onClick={handleInputClick}\n        />\n        <Button type=\"submit\" name=\"button\">\n          Search\n        </Button>\n      </Form>\n      {inputForFetch && <MovieSearchList query={inputForFetch} />}\n    </>\n  );\n}\n","import MovieSearch from 'components/MovieSearch/MovieSearch';\nexport default function MoviePage() {\n  return <MovieSearch />;\n}\n"],"names":["KEY","axios","fetchGetMovieDetails","movieId","setMovieDetails","setLoader","response","data","id","title","release_date","overview","vote_average","poster_path","backdrop_path","genres","fetchGetMoviesListTrend","setListFilms","result","results","array","map","workWithQuery","fetchGetMoviesListQuery","setMovieList","query","fetchGetMovieReviews","setMoviesReviews","author","content","fetchGetMovieCastList","setCastList","name","profile_path","cast","MoviesList","styled","MovieItem","MovieLink","Link","MovieSearchList","useState","movieList","loader","location","useLocation","useEffect","getQuery","strokeColor","strokeWidth","animationDuration","width","visible","length","to","state","from","Form","Button","Input","MovieSearch","useSearchParams","searchParams","setSearchParams","movieQuery","get","input","setInput","inputForFetch","setInputForFetch","onSubmit","event","preventDefault","normalizedInput","trim","toLowerCase","console","log","type","value","onChange","e","target","onClick","MoviePage"],"sourceRoot":""}