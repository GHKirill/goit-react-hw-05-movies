{"version":3,"file":"static/js/350.52c68b78.chunk.js","mappings":"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","sources":["components/API/fetches.js","components/MovieReviews/MovieReviews.styled.js","components/MovieReviews/MovieReviews.js"],"sourcesContent":["import axios from 'axios';\nconst KEY = '7fbdf6cf40f68e209048a77188ae45b3';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchGetMovieDetails = async (\n  movieId,\n  setMovieDetails,\n  setLoader\n) => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  const {\n    id,\n    title,\n    release_date,\n    overview,\n    vote_average,\n    poster_path,\n    backdrop_path,\n    genres,\n  } = response.data;\n  setMovieDetails({\n    id,\n    title,\n    release_date,\n    overview,\n    vote_average,\n    poster_path,\n    backdrop_path,\n    genres,\n  });\n  setLoader(false);\n};\n\nexport const fetchGetMoviesListTrend = async (setListFilms, setLoader) => {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  const result = response.data.results;\n\n  const workWithQuery = array => {\n    return array.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n  };\n  setListFilms(workWithQuery(result));\n  setLoader(false);\n};\n\nexport const fetchGetMoviesListQuery = async (\n  setMovieList,\n  query,\n  setLoader\n) => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  const workWithQuery = array => {\n    return array.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n  };\n  setMovieList(workWithQuery(response.data.results));\n  setLoader(false);\n};\n\nexport const fetchGetMovieReviews = async (\n  setMoviesReviews,\n  movieId,\n  setLoader\n) => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  const workWithQuery = response =>\n    response.map(({ author, content, id }) => ({ author, content, id }));\n  setMoviesReviews(workWithQuery(response.data.results));\n  setLoader(false);\n};\n\nexport const fetchGetMovieCastList = async (\n  setCastList,\n  movieId,\n  setLoader\n) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n\n  const workWithQuery = data => {\n    return data.map(({ id, name, profile_path }) => ({\n      id,\n      name,\n      profile_path,\n    }));\n  };\n  setCastList(workWithQuery(response.data.cast));\n  setLoader(false);\n};\n","import styled from 'styled-components';\n\nexport const ReviewsWrapper = styled.ul`\n  list-style: none;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const ReviewItem = styled.li`\n  margin: 0;\n  padding: 10px 20px;\n  border-radius: 7px;\n  box-shadow: 2px 1px 9px 0px #000000;\n`;\n\nexport const ReviewAuthor = styled.p`\n  font-size: 20px;\n  font-weight: 400;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { fetchGetMovieReviews } from 'components/API/fetches';\nimport {\n  ReviewsWrapper,\n  ReviewItem,\n  ReviewAuthor,\n} from './MovieReviews.styled';\n\nexport default function MovieReviews() {\n  const [moviesReviews, setMoviesReviews] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesReviews = async () => {\n      setLoader(true);\n      fetchGetMovieReviews(setMoviesReviews, movieId, setLoader);\n    };\n    fetchMoviesReviews();\n  }, [movieId]);\n\n  return moviesReviews.length ? (\n    <ReviewsWrapper>\n      {loader && (\n        <>\n          <RotatingLines\n            strokeColor=\"orange\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"96\"\n            visible={true}\n          />\n          <span> is loading...</span>\n        </>\n      )}\n      {moviesReviews.map(({ author, content, id }) => (\n        <ReviewItem key={id}>\n          <ReviewAuthor>{author}</ReviewAuthor>\n          <p>{content}</p>\n        </ReviewItem>\n      ))}\n    </ReviewsWrapper>\n  ) : (\n    <div>We don't have reviews for this movie</div>\n  );\n}\n"],"names":["KEY","axios","fetchGetMovieDetails","movieId","setMovieDetails","setLoader","response","data","id","title","release_date","overview","vote_average","poster_path","backdrop_path","genres","fetchGetMoviesListTrend","setListFilms","result","results","array","map","workWithQuery","fetchGetMoviesListQuery","setMovieList","query","fetchGetMovieReviews","setMoviesReviews","author","content","fetchGetMovieCastList","setCastList","name","profile_path","cast","ReviewsWrapper","styled","ReviewItem","ReviewAuthor","MovieReviews","useState","moviesReviews","loader","useParams","useEffect","fetchMoviesReviews","length","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}